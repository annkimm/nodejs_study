// 작업 스케쥴러 (job scheduler)
// 정해진 날짜/시간/분/초에 지정된 작업을 수행하라고 미리 등록헤놓는 것
// 특정 주기마다
// 1. 데이터 백업: 매일 밤 12시, 매주 토요일 밤 12시, 사용자가 시스템을 사용하지 않는 시간 동안 중요한 데이터/ 파일을 백업해놓는 데 사용
// 2. 정기 리포트: 기업에서 발생하는 중요한 데이터 - 신규 고객, 판매 현황, 매주 월요일 아침 7시에 지난 주 한주간의 판매현황 리포트(엑셀파일)로 만들어서 송부
// 3. 일정관리: 스마트폰에서 일정을 동록할 때 알림 설정, 30분 전, 1시간 전

// node-cron
const cron = require('node-cron');

// 초 분 시 며칠 달 무슨 요일
cron.schedule("* * * * * *", () => {
    console.log("1초 마다 작업 실행");
})

cron.schedule("* * * * *", () => {
  console.log("1분 마다 작업 실행");
})

cron.schedule("2 * * * *", () => {
  console.log("매 시간 2분 마다 작업 실행"); // 9:02 10:02
})

cron.schedule("1,2,4,5 * * * *", () => {
  console.log("매 시간의 1분, 2분, 4분 5분 마다 작업 실행"); // 8:01, 8:02, 8:04, 8:05, 9:01, 9:02, 9:04 9:05...
})

cron.schedule("!~10 * * * *", () => {
  console.log("매시간의 1~10분(1,2,3,4,5,6,7,8,9,10) 마다 작업 실행");
})

// 0 - 일, 1 - 월
cron.schedule("0 7 * * 1", () => {
  console.log("매주 월요일 7시 마다 작업 실행"); // 9:02 10:02
})

// 매일 밤 12시
cron.schedule("0 0 * * *", () => {
  console.log("매일 밤 12시 마다 작업 실행");
})

// 실무에서는 scheduled: false로 만들어서 놓고 사용자(관리자)의 액션에 따라서 start, stop, destory를 할 수 있도록 만들어놓음
const task = cron.schedule("* * * * * *", () => {
  console.log("1초 마다 작업이 실행");
}, {scheduled: false}) // start() 함수가 호출되어야만 실행 가능

task.start(); // 작업 시작
task.stop(); // 작업 멈춤
// task.destory() // 작업을 완전히 삭제, 근데 찾아봐도 없음